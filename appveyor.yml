#---------------------------------#
#      environment configuration  #
#---------------------------------#
os: Unstable
version: 0.1.{build}.0
skip_commits:
    message: /updated readme.*
install:
  - cinst -y pester --version '3.3.13'
  - git clone https://github.com/PowerShell/DscResource.Tests
  - ps: Push-Location
  - cd DscResource.Tests
  - ps: Import-Module .\TestHelper.psm1 -force
  - ps: Pop-Location
  - ps: Get-PackageProvider -Name NuGet -Force
  
environment:
  APIKEY:
    secure: z3no1lElCb0WtrRxtEZUqz2uBlbRkanI4uSaGnk7PSj/zGe1Te1FCmEIvhyr5o0J

#---------------------------------#
#      build configuration        #
#---------------------------------#

build: false

#---------------------------------#
#      test configuration         #
#---------------------------------#

test_script:
  #  - ps: |
  #      $testResultsFile = ".\TestsResults.xml"
  #      $res = Invoke-Pester -OutputFormat NUnitXml -OutputFile $testResultsFile -PassThru
  #      (New-Object 'System.Net.WebClient').UploadFile("https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path $testResultsFile))
  #      if ($res.FailedCount -gt 0) {
  #          throw "$($res.FailedCount) tests failed."
  #      }

#---------------------------------#
#      deployment configuration   #
#---------------------------------#

# scripts to run before deployment

# NOTE The manifest file should be dynamically identified, as should the module version data in the file
before_deploy:
  - ps: |
      # Creating project artifact
      $stagingDirectory = (Resolve-Path ..).Path
      # Update Manifest File
      $stagingDirectory = (Resolve-Path ..).Path
      $manifest = Join-Path $pwd 'AzureRateCard.psd1'
      (Get-Content $manifest -Raw).Replace("0.0.0.1", $env:APPVEYOR_BUILD_VERSION) | Set-Content $manifest

deploy_script:
  - ps: |
      # Creating project artifact
      $stagingDirectory = (Resolve-Path ..).Path
      $manifest = Join-Path $pwd "xWebAdministration.psd1"
      (Get-Content $manifest -Raw).Replace("1.8.0.0", $env:APPVEYOR_BUILD_VERSION) | Out-File $manifest
      $zipFilePath = Join-Path $stagingDirectory "$(Split-Path $pwd -Leaf).zip"
      Add-Type -assemblyname System.IO.Compression.FileSystem
      [System.IO.Compression.ZipFile]::CreateFromDirectory($pwd, $zipFilePath)
      # Creating NuGet package artifact
      New-Nuspec -packageName $env:APPVEYOR_PROJECT_NAME -version $env:APPVEYOR_BUILD_VERSION -author "Microsoft" -owners "Microsoft" -licenseUrl "https://github.com/PowerShell/DscResources/blob/master/LICENSE" -projectUrl "https://github.com/$($env:APPVEYOR_REPO_NAME)" -packageDescription $env:APPVEYOR_PROJECT_NAME -tags "DesiredStateConfiguration DSC DSCResourceKit" -destinationPath .
      nuget pack ".\$($env:APPVEYOR_PROJECT_NAME).nuspec" -outputdirectory .
      $nuGetPackageName = $env:APPVEYOR_PROJECT_NAME + "." + $env:APPVEYOR_BUILD_VERSION + ".nupkg"
      $nuGetPackagePath = (Get-ChildItem $nuGetPackageName).FullName
      @(
          # You can add other artifacts here
          $zipFilePath,
          $nuGetPackagePath
      ) | % {
          Write-Host "Pushing package $_ as Appveyor artifact"
          Push-AppveyorArtifact $_
        }

#---------------------------------#
#      after build                #
#---------------------------------#

on_finish:
- ps: #$blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

on_success:
  - ps: #Publish-Module -NuGetAPIKey $env:APIKEY -Path $pwd
